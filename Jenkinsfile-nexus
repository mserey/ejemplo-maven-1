import groovy.json.JsonSlurperClassic

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
pipeline {
    agent any
    environment {
        NEXUS_USER         = credentials('nexus-user')
        NEXUS_PASSWORD     = credentials('admin')
    }
    stages {
        stage("Pipeline"){
            steps {
                script{
                    stage("Paso 0: Download Code and checkout"){
                        checkout(
                            [$class: 'GitSCM',
                            //Acá reemplazar por el nonbre de branch
                            branches: [[name: "*/feature/sonar*" ]],
                            //Acá reemplazar por su propio repositorio
                            userRemoteConfigs: [[url: 'https://github.com/mserey/ejemplo-maven-1.git']]])
                    }
                    stage("Paso 1: Compliar"){
                        steps {
                            script {
                            sh "echo 'Compile Code!'"
                            // Run Maven on a Unix agent.
                            sh "./mvnw clean compile -e"
                            }
                        }
                    }
                    stage("Paso 2: Testear"){
                        steps {
                            script {
                            sh "echo 'Test Code!'"
                            // Run Maven on a Unix agent.
                            sh "./mvnw clean test -e"
                            }
                        }
                    }
                    stage("Paso 3: Build .Jar"){
                        steps {
                            script {
                            sh "echo 'Build .Jar!'"
                            // Run Maven on a Unix agent.
                            sh "./mvnw clean package -e"
                            }
                        }            
                    }
                    stage("Paso 4: Sonar - Análisis Estático"){
                        sh "echo 'Análisis Estático!'"
                        withSonarQubeEnv('sonarqube') {
                            sh "echo 'Calling sonar by ID!'"
                            // Run Maven on a Unix agent to execute Sonar.
                            //sh './mvnw sonarqube                -Dsonar.projectKey=ejemplo-./mvnw -Dsonar.java.binaries=build'
                            sh './mvnw clean verify sonar:sonar -Dsonar.projectKey=ejemplo-maven-1-sonarqube -Dsonar.projectName=ejemplo-maven-1-sonarqube -Dsonar.java.binaries=build'
                        }
                    }
                    post {
                        //record the test results and archive the jar file.
                        success {
                            archiveArtifacts artifacts:'build/*.jar'
                        }
                    }
                    stage("Paso 5: Curl Springboot ./mvnw sleep 20"){
                        steps {
                            script{
                                sh "nohup bash ./mvnw spring-boot:run  & >/dev/null"
                                sh "sleep 20 && curl -X GET 'http://localhost:8081/rest/mscovid/test?msg=testing'"
                            }
                        }
                    }
                    stage("Paso 6: Detener Spring Boot"){
                        steps {
                            script{
                                sh '''
                                    echo 'Process Spring Boot Java: ' $(pidof java | awk '{print $1}')  
                                    sleep 20
                                    kill -9 $(pidof java | awk '{print $1}')
                                '''
                            }
                        }
                    }
                    stage("Paso 7: Subir Artefacto a Nexus"){
                        steps {
                            script{
                                nexusPublisher nexusInstanceId: 'nexus',
                                    nexusRepositoryId: 'maven-usach-ceres',
                                    packages: [
                                        [$class: 'MavenPackage',
                                            mavenAssetList: [
                                                [classifier: '',
                                                extension: 'jar',
                                                filePath: 'build/DevOpsUsach2020-0.0.1.jar'
                                            ]
                                        ],
                                            mavenCoordinate: [
                                                artifactId: 'DevOpsUsach2020',
                                                groupId: 'com.devopsusach2020',
                                                packaging: 'jar',
                                                version: '0.0.1'
                                            ]
                                        ]
                                    ]
                            }
                        }
                    }
                    stage("Paso 8: Descargar Nexus"){
                        steps {
                            script{
                                sh ' curl -X GET -u admin:$NEXUS_PASSWORD "http://nexus:8081/repository/maven-usach-ceres/com/devopsusach2020/DevOpsUsach2020/0.0.1/DevOpsUsach2020-0.0.1.jar" -O'
                            }
                        }
                    }
                    stage("Paso 9: Levantar Artefacto Jar en server Jenkins"){
                        steps {
                            script{
                                sh 'nohup java -jar DevOpsUsach2020-0.0.1.jar & >/dev/null'
                            }
                        }
                    }
                    stage("Paso 10: Testear Artefacto - Dormir(Esperar 20sg) "){
                        steps {
                            script{
                                sh "sleep 20 && curl -X GET 'http://localhost:8081/rest/mscovid/test?msg=testing'"
                            }
                        }
                    }
                    stage("Paso 11:Detener Atefacto jar en Jenkins server"){
                        steps {
                            sh '''
                                echo 'Process Java .jar: ' $(pidof java | awk '{print $1}')  
                                sleep 20
                                kill -9 $(pidof java | awk '{print $1}')
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    sh "echo 'fase always executed post'"
                }
                success{
					slackSend color: 'good', message: "[Mentor Devops] [${JOB_NAME}] [${BUILD_TAG}] Ejecucion Exitosa", teamDomain: 'dipdevopsusac-tr94431', tokenCredentialId: 'token-user-slack'
				}
				failure{
					slackSend color: 'danger', message: "[Mentor Devops] [${env.JOB_NAME}] [${BUILD_TAG}] Ejecucion fallida en stage [${env.STAGE}]", teamDomain: 'dipdevopsusac-tr94431', tokenCredentialId: 'token-user-slack'
				}
            }
        }
    }
}